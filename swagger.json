{
  "swagger": "2.0",
  "info": {
    "description": "Free Mentors is a social initiative where accomplished professionals become role models to young people to provide free mentorship sessions.",
    "version": "1.0.0",
<<<<<<< Updated upstream
    "title": "Free_Mentor",
    "termsOfService": "https://github.com/key-joshua/free_mentors/blob/develop/README.md",
    "contact": {
      "email": "k.joshua855@gmail.com"
    }
  },
  "host": "free-mentors-app-2.herokuapp.com",
  "basePath": "/api/v2",
  "tags": [
    {
      "name": "Users",
      "description": "All those endpoints of the users allows them to signup, signin, update profile"
    },
    {
      "name": "store",
      "description": "Everything about the sessions"
    },
    {
      "name": "user",
      "description": "Operations about user",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "register a new user to the application",
        "description": "Now by the use of this POST endpoint all new users should get their own account by signup with free_mentor application and the same time will get token to authenticate him / her to the resources after successfully registered ",
        "operationId": "Localhost3000ApiV1AuthSignupPost",
        "deprecated": false,
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/xml"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "you successfully created account"
          }
        }
      },
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet",
        "description": "",
        "operationId": "updatePet",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Pet object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ],
              "default": "available"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "deprecated": true
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "uploads an image",
        "description": "",
        "operationId": "uploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to update",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "additionalMetadata",
            "in": "formData",
            "description": "Additional data to pass to server",
            "required": false,
            "type": "string"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "file to upload",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/store/inventory": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Place an order for a pet",
        "description": "",
        "operationId": "placeOrder",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "order placed for purchasing the pet",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid Order"
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
        "operationId": "getOrderById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of pet that needs to be fetched",
            "required": true,
            "type": "integer",
            "maximum": 10,
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
        "operationId": "deleteOrder",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "description": "ID of the order that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithArray": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithArrayInput",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Creates list of users with given input array",
        "description": "",
        "operationId": "createUsersWithListInput",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "List of user object",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "description": "The name that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "petstore_auth": {
      "type": "oauth2",
      "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
      "flow": "implicit",
      "scopes": {
        "write:pets": "modify pets in your account",
        "read:pets": "read your pets"
      }
    },
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    }
  },
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "type": "integer",
          "format": "int32",
          "description": "User Status"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "Pet": {
      "type": "object",
      "required": [
        "name",
        "photoUrls"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "photoUrls": {
          "type": "array",
          "xml": {
            "name": "photoUrl",
            "wrapped": true
          },
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "xml": {
            "name": "tag",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "xml": {
        "name": "Pet"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
=======
    "title": "Free_Mentors",
    "termsOfService": "https://github.com/key-joshua/free_mentors/blob/develop/README.md",
    "contact": { "email": "k.joshua855@gmail.com" }
  },

  "host": "localhost:2000",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Users",
      "description": " Users endpoints :: All those endpoints are used to the users like to signup, signin, view users, view mentees, view mentors, ..."
    },
    {
      "name": "sessions",
      "description": "sessions endpoints :: All those endpoints are used by the users like to create sessions, view sessions, accept or reject sessions ..."
    },
    {
      "name": "reviews",
      "description": "reviews endpoints :: All those endpoints are used by the users like to create reviews, view reviews, delete reviews..."
    }
  
  
  ],
  
  "schemes": ["http","https"],
  "consumes": ["application/json", "none"],
  "produces": [ "application/json", "none"],
  "paths": {

    "/signup": {
      "post": {
        "tags": [ "Users"],
        "summary": "register new user into DB with free mentors  application",
        "description": "Now by the use of this POST endpoint you can register new user into DataBases hould with free_mentor application and after successfully register you will get token to authenticate to the resources",        
        "parameters": [ { "in":"body", "name":"body",  "description":"parsing user data to create account as object", "schema": { "$ref": "#definitions/user" }}],
        "responses": { "201": { "description": " OK : successfully created account into DataBase"}, "400": { "description": " FAIL : something wrong is occure"}}
      }
    },

    "/signin": {
      "post": {
        "tags": [ "Users"],
        "summary": "signin user with free mentors  application",
        "description": "Now by the use of this POST endpoint you can signin user with free_mentor application and after successfully signin he/she will get token to authenticate to the resources",        
        "parameters": [ { "in":"body", "name":"body",  "description":"parsing user data to signin as object", "schema": { "$ref": "#definitions/user" }}],
        "responses": { "200": { "description": " OK : successfully logged in"}}
      
      }
    },

    "/users": {
      "get": {
        "tags": [ "Users"],
        "summary": "admin should retrieve all kinds of users from DB with free mentors  application",
        "description": "Now by the use of this GET endpoint admin can retrieve all kinds users (Mentee, Mentors, Admins) from DataBase with free_mentor application and admin must have token to authenticated to get those resources",
        "parameters": [ { "in":"header", "name":"Authorization",  "description":"parsing a given token to get authenticated to the resources", "type": "string" }],
        "responses": { "200": { "description": " OK : successfully retrieved all users from DataBase"}}
      }
    },

    "/mentees": {
      "get": {
        "tags": [ "Users"],
        "summary": "any users should retrieve all mentees from DB with free mentors application",
        "description": "Now by the use of this GET endpoint any user can retrieve all metees from DataBase with free_mentor application and she/he must have token to get authenticated to get those resources",
        "parameters": [ { "in":"header", "name":"Authorization",  "description":"user must parsing a given token to get authenticated to the resources", "type": "string" }],
        "responses": { "200": { "description": " OK : successfully retrieved all mentees from DataBase"}}
      }
    },

    "/mentors": {
      "get": {
        "tags": [ "Users"],
        "summary": "any users should retrieve all mentors from DB with free mentors application",
        "description": "Now by the use of this GET endpoint any user can retrieve all metors from DataBase with free_mentor application and she/he must have token to get authenticated to get those resources",
        "parameters": [ { "in":"header", "name":"Authorization",  "description":"user must parsing a given token to get authenticated to the resources", "type": "string" }],
        "responses": { "200": { "description": " OK : successfully retrieved all mentees from DataBase"}}
      }
    },

    "/admins": {
      "get": {
        "tags": [ "Users"],
        "summary": "any admin should retrieve all admins from DB with free mentors application",
        "description": "Now by the use of this GET endpoint any admin can retrieve all admins from DataBase with free_mentor application and she/he must have token to get authenticated to get those resources",
        "parameters": [ { "in":"header", "name":"Authorization",  "description":"user must parsing a given token to get authenticated to the resources", "type": "string" }],
        "responses": { "200": { "description": " OK : successfully retrieved all admins from DataBase"}}
      }
    },

    "/mentees/{menteeId}": {
      "get": {
        "tags": [ "Users"],
        "summary": "any users should view specific mentee from DB with free mentors application",
        "description": "Now by the use of this GET endpoint any user can view specific mentee from DataBase with free_mentor application and she/he must have token to get authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully view specific mentee from DataBase"}},
        "parameters": 
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"user must parsing a given token to get authenticated to the resources", 
            "type": "string"
          }, 
          { 
            "in": "path",
            "name": "menteeId", 
            "type": "integer", 
            "format": "int32",
            "description": "user must parsing a menteeId to get mentee details" 
          }
        ]       
      }
    },

    "/mentors/{mentorId}": {
      "get": {
        "tags": [ "Users"],
        "summary": "any users should view specific mentor from DB with free mentors application",
        "description": "Now by the use of this GET endpoint any user can view specific mentor from DataBase with free_mentor application and she/he must have token to get authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully view specific mentor from DataBase"}},
        "parameters": 
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"user must parsing a given token to get authenticated to the resources", 
            "type": "string"
          }, 
          { 
            "in": "path",
            "name": "mentorId", 
            "type": "integer", 
            "format": "int32",
            "description": "user must parsing a menteeId to get mentor details" 
          }
        ]        
      }
    },

    "/admins/{adminId}": {
      "get": {
        "tags": [ "Users"],
        "summary": "any admin should view specific admin from DB with free mentors application",
        "description": "Now by the use of this GET endpoint any admin can view specific admin from DataBase with free_mentor application and she/he must have admin token to get authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully view specific admin from DataBase"}},
        "parameters": 
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"admin must parsing a given admin token to get authenticated to the resources", 
            "type": "string"
          }, 
          { 
            "in": "path",
            "name": "adminId", 
            "type": "integer", 
            "format": "int32",
            "description": "admin must parsing a adminId to get admin details" 
          }
        ] 
      }
    },

    "/users_mentor_or_mentee/{userId}": {
      "patch": {
        "tags": [ "Users"],
        "summary": "admin should change mentee to mentor with free mentors  application",
        "description": "Now by the use of this GET endpoint admin should change mentee to mentor with free_mentor application and must have a admin token to authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully changed mentee to mentor or to admin with free_mentor application"}},
        "parameters":  
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"admin must parsing a admin token to get authenticated to the resources", 
            "type": "string"
          }, 
          { 
            "in": "path",
            "name": "userId", 
            "type": "integer", 
            "format": "int32",
            "description": "mentor must parsing a sessionId to view and reject requested session to him/her" 
          },
          { 
            "in":"body", 
            "name":"body",  
            "description":"input keyword mentor or admin to change that mentee through his/her id",
            "schema": { "$ref": "#definitions/user" }
          }
        ] 
      }
    },

    "/passwords": {
      "patch": {
        "tags": [ "Users"],
        "summary": "user should change his/her password with free mentors  application",
        "description": "Now by the use of this GET endpoint user should change his/her password with free_mentor application and must have a given token to authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully changed password with free_mentor application"}},
        "parameters":  
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"user must parsing a given token to get authenticated to the resources", 
            "type": "string"
          }, 
          { 
            "in":"body", 
            "name":"body",  
            "description":"input your new password and old password to confirm it",
            "schema": { "$ref": "#definitions/user" }
          }
        ] 
      }
    },

    "/user": {
      "patch": {
        "tags": [ "Users"],
        "summary": "user should update his/her profile with free mentors  application",
        "description": "Now by the use of this GET endpoint user should change his/her profile with free_mentor application and must have a given token to authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully updated profile with free_mentor application"}},
        "parameters":  
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"user must parsing a given token to get authenticated to the resources", 
            "type": "string"
          },
          { 
            "in":"body", 
            "name":"body",  
            "description":"input your profile details and password to confirm the change",
            "schema": { "$ref": "#definitions/user" }
          }
        ] 
      }
    },













    "/session": {
      "post": {
        "tags": [ "sessions"],
        "summary": "creating a session with specific mentor on free mentors  application",
        "description": "Now by the use of this POST endpoint you can create a session with specific mentor on free_mentor application and after successfully loggeddin you will get token to authenticate to create resources",        
       "responses": { "201": { "description": " OK : successfully created account into DataBase"}, "400": { "description": " FAIL : something wrong is occure"}}, 
       "parameters": 
       [ 
        { 
          "in":"header", 
          "name":"Authorization",  
          "description":"admin must parsing a given admin token to get authenticated to the resources", 
          "type": "string"
        },
         { 
           "in":"body", 
           "name":"body",  
           "description":"parsing mentorId and question to create session as object", 
           "schema": { "$ref": "#definitions/session" }
          }    
        ]        
      }
    },

    "/session/": {
      "get": {
        "tags": [ "sessions"],
        "summary": "admin should retrieve all requested session of mentees from DB with free mentors  application",
        "description": "Now by the use of this GET endpoint admin can retrieve all requested sessions of mentees from DataBase with free_mentor application and admin must have admin token to authenticated to get those resources",
        "parameters": [ { "in":"header", "name":"Authorization",  "description":"parsing a given admin token to get authenticated to the resources", "type": "string" }],
        "responses": { "200": { "description": " OK : successfully retrieved all requested sessions from DataBase"}}
      }
    },

    "/sessions": {
      "get": {
        "tags": [ "sessions"],
        "summary": "mentee or mentor should view his/her sessions against to  him/her with free mentors  application",
        "description": "Now by the use of this GET endpoint mentee or mentor should view his/her sessions against to  him/her with free_mentor application and must have token to authenticated to get those resources",
        "parameters": [ { "in":"header", "name":"Authorization",  "description":"parsing a given token to get authenticated to the resources", "type": "string" }],
        "responses": { "200": { "description": " OK : successfully viewd your sessions  with free_mentor application"}}
      }
    },
    
    "/onesession/{sessionId}": {
      "get": {
        "tags": [ "sessions"],
        "summary": "admin should view all sessions by it's sessionId with free mentors  application",
        "description": "Now by the use of this GET endpoint admin should view mentee or mentor's sessions against to  him/her with free_mentor application and must have admin token to authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully viewd mentee or mentor sessions  with free_mentor application"}},
        "parameters":  
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"admin must parsing a given admin token to get authenticated to the resources", 
            "type": "string"
          }, 
          { 
            "in": "path",
            "name": "sessionId", 
            "type": "integer", 
            "format": "int32",
            "description": "admin must parsing a sessionId to get mentee's session or mentor's session by it id details" 
          }
        ] 
      }
    },

    "/sessionsmentor/{mentorId}": {
      "get": {
        "tags": [ "sessions"],
        "summary": "admin should view all sessions of a given mentor  by mentorId with free mentors  application",
        "description": "Now by the use of this GET endpoint admin should view all sessions of a given mentor  by mentorId with free_mentor application and must have admin token to authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully viewd sessions of a given mentor  with free_mentor application"}},
        "parameters":  
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"admin must parsing a given admin token to get authenticated to the resources", 
            "type": "string"
          }, 
          { 
            "in": "path",
            "name": "mentorId", 
            "type": "integer", 
            "format": "int32",
            "description": "admin must parsing a mentorId to get mentor's session by his/her id " 
          }
        ] 
      }
    },

    "/sessionsmentee/{menteeId}": {
      "get": {
        "tags": [ "sessions"],
        "summary": "admin should view all sessions of a given mentee  by menteeId with free mentors  application",
        "description": "Now by the use of this GET endpoint admin should view all sessions of a given mentor  by menteeId with free_mentor application and must have admin token to authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully viewd sessions of a given mentee  with free_mentor application"}},
        "parameters":  
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"admin must parsing a given admin token to get authenticated to the resources", 
            "type": "string"
          }, 
          { 
            "in": "path",
            "name": "menteeId", 
            "type": "integer", 
            "format": "int32",
            "description": "admin must parsing a menteeId to get mentee's session by his/her id " 
          }
        ] 
      }
    },

    "/sessions/{sessionId}/accepts": {
      "patch": {
        "tags": [ "sessions"],
        "summary": "mentor should view and accept all requested sessions to him/her of a given mentee  by sessionId with free mentors  application",
        "description": "Now by the use of this GET endpoint mentor should view and accept all requested sessions to him/her of a given mentee  by sessionId with free_mentor application and must have a given token to authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully viewd and accept this sessions of a given mentee  with free_mentor application"}},
        "parameters":  
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"mentor must parsing a given token to get authenticated to the resources", 
            "type": "string"
          }, 
          { 
            "in": "path",
            "name": "sessionId", 
            "type": "integer", 
            "format": "int32",
            "description": "mentor must parsing a sessionId to view and accept requested session to him/her" 
          }
        ] 
      }
    },

    "/sessions/{sessionId}/rejects": {
      "patch": {
        "tags": [ "sessions"],
        "summary": "mentor should view and reject all requested sessions to him/her of a given mentee  by sessionId with free mentors  application",
        "description": "Now by the use of this GET endpoint mentor should view and reject all requested sessions to him/her of a given mentee  by sessionId with free_mentor application and must have a given token to authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully viewd and reject this sessions of a given mentee  with free_mentor application"}},
        "parameters":  
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"mentor must parsing a given token to get authenticated to the resources", 
            "type": "string"
          }, 
          { 
            "in": "path",
            "name": "sessionId", 
            "type": "integer", 
            "format": "int32",
            "description": "mentor must parsing a sessionId to view and reject requested session to him/her" 
          }
        ] 
      }
    },



    
    "/sessions/{sessionId}/review/": {
      "post": {
        "tags": [ "reviews"],
        "summary": "mentee should review mentor after requested the session by sessionId with free mentors  application",
        "description": "Now by the use of this GET endpoint mentee should review mentor after requested the session by sessionId with free_mentor application and must have a given token to authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully reviewed this mentor with free_mentor application"}},
        "parameters":  
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"mentee must parsing a given token to get authenticated to the resources", 
            "type": "string"
          }, 
          { 
            "in": "path",
            "name": "sessionId", 
            "type": "integer", 
            "format": "int32",
            "description": "mentee must parsing a sessionId to review that requested session to him/her" 
          },
          { 
            "in":"body", 
            "name":"body",  
            "description":"input score and remarkto review that mentor through  sessionId"
          }
        ] 
      }
    },

    "/reviews": {
      "get": {
        "tags": [ "reviews"],
        "summary": "admin should retrieve all reviews of mentee from DB with free mentors  application",
        "description": "Now by the use of this GET endpoint admin can retrieve all reviews of users from DataBase with free_mentor application and admin must have admin token to authenticated to get those resources",
        "parameters": [ { "in":"header", "name":"Authorization",  "description":"parsing a given token to get authenticated to the resources", "type": "string" }],
        "responses": { "200": { "description": " OK : successfully retrieved all users from DataBase"}}
      }
    },

    "mentee_or_mentor/reviews": {
      "get": {
        "tags": [ "reviews"],
        "summary": "mentee or mentor should retrieve all his/her reviews from DB with free mentors  application",
        "description": "Now by the use of this GET endpoint mentee or mentor can retrieve all his/her reviews from DataBase with free_mentor application and must have a given token to authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully retrieved all your from DataBase"}},
        "parameters": [ { "in":"header", "name":"Authorization",  "description":"parsing a given token to get authenticated to the resources", "type": "string" }]
        
      }
    },


    "mentee_or_mentor/reviews/{reviewId}": {
      "get": {
        "tags": [ "reviews"],
        "summary": "mentee or mentor should retrieve all his/her reviews from DB with free mentors  application",
        "description": "Now by the use of this GET endpoint mentee or mentor can retrieve a given review by reviewId his/her belong on it from DataBase with free_mentor application and must have a given token to authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully retrieved your review from DataBase"}},
        "parameters":
         [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"parsing a given token to get authenticated to the resources", 
            "type": "string" 
          },
          { 
            "in":"path", 
            "name":"reviewId",  
            "description":"parsing a reviewId to view a given review you belong to", 
            "type": "string" 
          }
        ]        
      }
    },

    "/sessions/{sessionId}/review": {
      "delete": {
        "tags": [ "reviews"],
        "summary": "admin should delete anapropriate creted review to a certain mentor after viewing that review created by mentee via sessionId with free mentors  application",
        "description": "Now by the use of this GET endpoint admin should delete anapropriate creted review to a certain mentor after viewing that review created by mentee via sessionId with free_mentor application and must have a admin token to authenticated to get those resources",
        "responses": { "200": { "description": " OK : successfully deleted this review to this mentor with free_mentor application"}},
        "parameters":  
        [ 
          { 
            "in":"header", 
            "name":"Authorization",  
            "description":"admin must parsing a admin token to get authenticated to the resources", 
            "type": "string"
          }, 
          { 
            "in": "path",
            "name": "sessionId", 
            "type": "integer", 
            "format": "int32",
            "description": "admin must parsing a sessionId belong to that review want to delete that review created" 
          }
        ] 
      }
    }
  },



  "definitions": {
    "user": 
    {
        "type": "object",
        "required": [ "email","password" ],
        "properties": 
        {
          "category":{"type":"string"},
          "firstName":{"type":"string"},
          "lastName":{"type":"string"},
          "email" : {"type": "string"},
          "expertise": {"type":"string"},
          "password": {"type":"string"},
          "confirm_password": {"type":"string"}
        }
    },

    "session": 
    {
      "type": "object",
      "required": [ "mentorId","questions" ],
      "properties": 
      {
        "mentorId":{"type":"integer"},
        "questions":{"type":"string"}
      }
    },

    "review": 
    {
      "type": "object",
      "required": [ "score","remark" ],
      "properties": 
      {
        "score":{"type":"integer"},
        "remark":{"type":"string"}
      }
    }
}
  
}

     
>>>>>>> Stashed changes
